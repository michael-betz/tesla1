<!DOCTYPE html>
<html>
<meta charset="UTF-8">
<head><title>Tesla1</title>
<link rel="stylesheet" type="text/css" href="style.css">
</head>
<body>
<div style="text-align: center;">
  <h1>üå©Ô∏è Tesla1 üå©Ô∏è</h1>
  <i>A Tesla coil pulse generator.</i>
  <b>WS: <span id=connected_status>‚ùå</span></b>
  <div>
    <button onclick="tab('t_tab');">T_ON / T_OFF</button>
    <button onclick="tab('f_tab');">FREQ / DUTY</button>
    <button onclick="tab('s_tab');">SINGLE SHOT</button>
    <button onclick="tab('l_tab');">MAINS LOCK</button>
    <button onclick="tab('m_tab');">MIDI</button>
  </div>
</div>


<div class="tab" id="t_tab">
  <div class="slidecontainer">
    <b>OFF</b>
    <input type="range" min="1000" max="10000" class="slider" id="OFF_slider">
    <div class=sliderNumber id=OFF_status>xxx</div>
  </div>

  <div class="slidecontainer">
    <b>ON</b>
    <input type="range" min="0" max="10000" class="slider" id="ON_slider">
    <span class=sliderNumber id=ON_status>xxx</span>
  </div>
</div>

<div class="tab" id="f_tab" style="display:none">
  <div class="slidecontainer">
    <b>FREQ</b>
    <input type="range" min="1000" max="10000" class="slider" id="FREQ_slider">
    <span class=sliderNumber id=FREQ_status>xxx</span>
  </div>

  <div class="slidecontainer">
    <b>DUTY</b>
    <input type="range" min="0" max="10000" class="slider" id="DUTY_slider">
    <span class=sliderNumber id=DUTY_status>xxx</span>
  </div>

  <div class="slidecontainer">
      <b>PHASE</b>
      <input type="range" min="0" max="10000" class="slider" id="PHASE_slider">
      <span class=sliderNumber id=PHASE_status>xxx</span>
  </div>
</div>

<div class="tab" id="s_tab" style="display:none">
  <div class="slidecontainer">
    <b>ON</b>
    <input type="range" min="1000" max="10600" class="slider" id="SS_ON_slider">
    <span class=sliderNumber id=SS_ON_status>xxx</span>
  </div>
  <div class="slidecontainer">
    <button class=fireButton id=SS_ON_btn>üí•</button>
  </div>
</div>

<div class="tab" id="l_tab" style="display:none">
  <div class="slidecontainer">
    <b>PRE</b>
    <input type="range" min="1" max="17000" class="slider" id="LPRE_slider">
    <span class=sliderNumber id=LPRE_status>xxx</span>
  </div>

  <div class="slidecontainer">
    <b>ON</b>
    <input type="range" min="0" max="8000" class="slider" id="LON_slider">
    <span class=sliderNumber id=LON_status>xxx</span>
  </div>

  <div class="slidecontainer">
      <b>OFF</b>
      <input type="range" min="1" max="1000000" class="slider" id="LOFF_slider">
      <span class=sliderNumber id=LOFF_status>xxx</span>
  </div>
</div>

<div class="tab" id="m_tab" style="display:none;">
  <ul id="song_list">
    <li>Adele</li>
    <li>Agnes</li>
    <li>Billy</li>
    <li>Bob</li>
    <li>Calvin</li>
    <li>Christina</li>
    <li>Cindy</li>
  </ul>
</div>
<script type="text/javascript">
  // var wsUri = "ws://" + window.location.host + ":8080";
  var wsUri = "ws://tesla1.local:8080";
  var websocket = new WebSocket(wsUri);

  // These are set to the C #define values on connection to the ESP8266
  var MAX_DUTY_PERCENT = 0;  // Max duty cycle [%]
  var MAX_T_ON = 0;  // Max on-time [us]
  var BITS_PER_SEC = 1000000; // I2S sampling rate

  var midis = {};

  var sliders = {};
  ["ON", "OFF", "FREQ", "DUTY", "PHASE", "LPRE", "LON", "LOFF", "SS_ON"].forEach(function (v, i) {
    sliders[v] = [
      document.getElementById(v + "_slider"),  // slider object
      document.getElementById(v + "_status"),  // label object
      0                                        // value with units (like [s])
    ]
  });

  ["ON", "OFF"].forEach(function (k) {
    sliders[k][0].oninput = processT;
  });

  ["FREQ", "DUTY"].forEach(function (k) {
    sliders[k][0].oninput = processF;
  });

  sliders['PHASE'][0].oninput = processP;
  sliders['SS_ON'][0].oninput = processSSON;

  btn = document.getElementById("SS_ON_btn");
  function btn_down(evt) {
    if (evt.button != 0)
      return;
    val_us = Math.round(sliders['SS_ON'][2] * 1000 * 1000);
    console.log("DOWN: p," + val_us);
    websocket.send('p,' + val_us);
    btn.style.background='#FFFFFF';
    if (val_us < 1600000) {
      setTimeout(function() {
        btn.style.background='#000000';
      }, val_us / 1000);
    }
  };
  function btn_up () {
    if (websocket.readyState != 1)
      return;
    console.log("UP: p,0");
    btn.style.background='#000000';
    websocket.send('p,',0);
  };

  btn.addEventListener('pointerdown', btn_down);
  document.addEventListener('pointerup', btn_up);
  document.addEventListener('pointercancel', btn_up);

  ["LPRE", "LON", "LOFF"].forEach(function (k) {
    sliders[k][0].oninput = function() {
      v = sliders[k];
      v[2] = v[0].value / 1e6;
      v[1].innerHTML = engLabel(v[2], 's');
      cmd = {"LPRE": "u", "LON": "v", "LOFF": "w"}[k]
      websocket.send(cmd + ',' + v[0].value);
    };
  });

  function tab(n) {
    var x = document.getElementsByClassName("tab");
    for (i = 0; i < x.length; i++) {
      x[i].style.display = "none";
    }
    document.getElementById(n).style.display = "block";

    rangeReset();

    if (n == 't_tab')
      websocket.send('r,0');
    else if (n == 'f_tab')
      websocket.send('r,0');
    else if (n == 's_tab')
      websocket.send('r,2');
    else if (n == 'l_tab')
      websocket.send('r,1');

    Object.keys(sliders).forEach(function(k){
      sliders[k][0].oninput();
    })
  }

  function engLabel(val, unit='Hz') {
    if (val == 0) {
      ord = 0;
    } else {
      ord = Math.floor(Math.log10(Math.abs(val)) / 3);
    }
    if (ord < 0) {
      pre = ['', 'm', 'u', 'n', 'p', 'f'][-ord];
    } else {
      pre = ['', 'k', 'M', 'G', 'T'][ord];
    }
    val = val / Math.pow(10, ord * 3);
    return val.toFixed(1) + ' ' + pre + unit;
  }

  function sliderToS(val, inverse=false) {
    // Make slider output logarithmic over N decades, [s] scaling
    var N_DECADES = 4;
    var min_val = Math.pow(10, -N_DECADES)
    if (inverse) {
      return (Math.log10(val + min_val) / N_DECADES + 1) * 10000;
    } else {
      return Math.pow(10, (val / 10000 - 1) * N_DECADES) - min_val;
    }
  }

  function processT() {
      // deal with the ON / OFF sliders
      ["ON", "OFF"].forEach(function (k) {
        v = sliders[k];
        v[2] = sliderToS(v[0].value);
        v[1].innerHTML = engLabel(v[2], 's');
      });

      // calc. max. t_on and set slider limit
      m_duty = MAX_DUTY_PERCENT / 100;
      max_t_on = 0;
      if (m_duty > 0)
        max_t_on = m_duty * sliders["OFF"][2] / (1 - m_duty);
      max_t_on = Math.min(MAX_T_ON / 1e6, max_t_on);
      sliders["ON"][0].max = sliderToS(max_t_on, true);

      // t_on
      sliders["ON"][2] = Math.min(max_t_on, sliders["ON"][2]);

      // calculate duty / ftw values and send them out
      T = sliders["ON"][2] + sliders["OFF"][2]
      duty = sliders["ON"][2] / T;
      duty = Math.floor(duty * 0xFFFFFFFF);
      ftw = Math.floor(0x100000000 / BITS_PER_SEC / T);
      websocket.send('s,' + ftw + ',' + duty);
      // console.log(ftw.toString(16), duty.toString(16), duty / ftw);
  }

  function processF() {
      sf = sliders["FREQ"]
      sd = sliders["DUTY"]

      if (false)
        sf[2] = 119 + sf[0].value / 5000;
      else
        sf[2] = 1 / sliderToS(sf[0].value);
      sf[1].innerHTML = engLabel(sf[2], 'Hz');

      sd[2] = sd[0].value / 10000;
      sd[1].innerHTML = (sd[2] * 100).toFixed(1) + ' %';

      ftw = Math.floor(0x100000000 * sf[2] / BITS_PER_SEC);
      duty = Math.floor(sd[2] * 0xFFFFFFFF);
      websocket.send('s,' + ftw + ',' + duty);
  }

  function processP() {
    sp = sliders["PHASE"];
    sp[2] = sp[0].value / 10000;
    sp[1].innerHTML = (sp[2] * 360).toFixed(1) + '¬∞';
    phase = Math.floor(sp[2] * 0xFFFFFFFF);
    console.log(phase.toString(16));
    websocket.send('t,' + phase);
  }

  function processSSON() {
    s = sliders["SS_ON"];
    s[2] = sliderToS(s[0].value);

    if (s[2] > 1.6) {
      s[2] = 1.6;
      s[1].innerHTML = 'üí£ CW üí£';
    } else {
      s[1].innerHTML = engLabel(s[2], 's');
    }
    console.log(s[2])
  }

  function rangeReset(disabled=false) {
      for (const [k, v] of Object.entries(sliders)) {
        v[0].disabled = disabled;
        if (k == "OFF")
          v[0].value = v[0].max;
        else
          v[0].value = v[0].min;
      }
      sliders["FREQ"][0].value = 5000;
  };

  function init() {
    websocket.onopen = function(evt) {
      connected_status.innerHTML = "‚åö";
    };

    websocket.onclose = function(evt) {
      connected_status.innerHTML = "‚ùå";
      rangeReset();
    };

    websocket.onmessage = function(evt) {
      console.log("dat: " + evt.data);
      dat = JSON.parse(evt.data);
      if ("hello" in dat) {
        MAX_DUTY_PERCENT = dat['MAX_DUTY_PERCENT'];
        sliders["DUTY"][0].max = MAX_DUTY_PERCENT / 100 * 10000;
        MAX_T_ON = dat['MAX_T_ON'];
        BITS_PER_SEC = dat["BITS_PER_SEC"];
        tab('t_tab');

        websocket.send("l");  // get list of midi files
        // document.getElementById("song_list").clear();

        setInterval(function() {
          websocket.send("i");
        }, 1000);
      } else if ("RSSI" in dat) {
        connected_status.innerHTML = "‚úÖ (" + dat["RSSI"] + "dBm)";
      } else if ("f" in dat) {
        midis[dat["f"]] = null
      }
    };

    websocket.onerror = function(evt) {
      connected_status.innerHTML = "üî• " + evt;
      rangeReset();
    };
  }

  window.addEventListener("load", init, false);

</script>
</body></html>
