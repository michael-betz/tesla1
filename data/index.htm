<html>
<meta charset="UTF-8">
<head><title>Tesla1</title>
<link rel="stylesheet" type="text/css" href="style.css">
</head>
<body>
<div style="text-align: center;">
    <h1>üå©Ô∏è Tesla1 üå©Ô∏è</h1>
    <i>A Tesla coil pulse generator.</i>
    <b>WS: <span id=connected_status>‚ùå</span></b>
</div>

  <div class="slidecontainer">
    <b>OFF</b>
    <input type="range" min="1000" max="10000" class="slider" id="OFF_slider">
    <div class=sliderNumber id=OFF_status>xxx</div>
  </div>

  <div class="slidecontainer">
    <b>ON</b>
    <input type="range" min="0" max="10000" class="slider" id="ON_slider">
    <span class=sliderNumber id=ON_status>xxx</span>
  </div>

  <div class="slidecontainer">
    <b>FREQ</b>
    <input type="range" min="1000" max="10000" class="slider" id="FREQ_slider">
    <span class=sliderNumber id=FREQ_status>xxx</span>
  </div>

  <div class="slidecontainer">
    <b>DUTY</b>
    <input type="range" min="0" max="10000" class="slider" id="DUTY_slider">
    <span class=sliderNumber id=DUTY_status>xxx</span>
  </div>

<div class="slidecontainer">
    <b>PHASE</b>
    <input type="range" min="0" max="10000" class="slider" id="PHASE_slider">
    <span class=sliderNumber id=PHASE_status>xxx</span>
  </div>

<script type="text/javascript">
  // var wsUri = "ws://" + window.location.host + ":8080";
  var wsUri = "ws://192.168.42.179:8080";
  var websocket = new WebSocket(wsUri);

  // These are set on connection
  var MAX_DUTY_PERCENT = 0;  // Max duty cycle [%]
  var MAX_T_ON = 0;  // Max on-time [us]
  var BITS_PER_SEC = 1000000; // I2S sampling rate

  var sliders = {};
  ["ON", "OFF", "FREQ", "DUTY", "PHASE"].forEach(function (v, i) {
    sliders[v] = [
      document.getElementById(v + "_slider"),  // slider object
      document.getElementById(v + "_status"),  // label object
      0                                        // value with units (like [s])
    ]
  });

  ["ON", "OFF"].forEach(function (k) {
    sliders[k][0].oninput = processT;
  });

  ["FREQ", "DUTY"].forEach(function (k) {
    sliders[k][0].oninput = processF;
  });

  var stats = [];
  var ranges = [];

  function engLabel(val, unit='Hz') {
    if (val == 0) {
      ord = 0;
    } else {
      ord = Math.floor(Math.log10(Math.abs(val)) / 3);
    }
    if (ord < 0) {
      pre = ['', 'm', 'u', 'n', 'p', 'f'][-ord];
    } else {
      pre = ['', 'k', 'M', 'G', 'T'][ord];
    }
    val = val / Math.pow(10, ord * 3);
    return val.toFixed(1) + ' ' + pre + unit;
  }

  function sliderToS(val, inverse=false) {
    // Make slider output logarithmic over N decades, [s] scaling
    var N_DECADES = 4;
    var min_val = Math.pow(10, -N_DECADES)
    if (inverse) {
      return (Math.log10(val + min_val) / N_DECADES + 1) * 10000;
    } else {
      return Math.pow(10, (val / 10000 - 1) * N_DECADES) - min_val;
    }
  }

  function processT() {
      // deal with the ON / OFF sliders
      ["ON", "OFF"].forEach(function (k) {
        v = sliders[k];
        v[2] = sliderToS(v[0].value);
        v[1].innerHTML = engLabel(v[2], 's');
      });

      // calc. max. t_on and set slider limit
      m_duty = MAX_DUTY_PERCENT / 100;
      max_t_on = 0;
      if (m_duty > 0)
        max_t_on = m_duty * sliders["OFF"][2] / (1 - m_duty);
      max_t_on = Math.min(MAX_T_ON / 1e6, max_t_on);
      sliders["ON"][0].max = sliderToS(max_t_on, true);

      // t_on
      sliders["ON"][2] = Math.min(max_t_on, sliders["ON"][2]);

      // calculate duty / ftw values and send them out
      T = sliders["ON"][2] + sliders["OFF"][2]
      duty = sliders["ON"][2] / T;
      duty = Math.floor(duty * 0xFFFFFFFF);
      ftw = Math.floor(0x100000000 / BITS_PER_SEC / T);
      websocket.send('s,' + ftw + ',' + duty);
      // console.log(ftw.toString(16), duty.toString(16), duty / ftw);
  }

  function processF() {
      sf = sliders["FREQ"]
      sd = sliders["DUTY"]

      sf[2] = 1 / sliderToS(sf[0].value);
      sf[1].innerHTML = engLabel(sf[2], 'Hz');

      sd[2] = sd[0].value / 10000;
      sd[1].innerHTML = (sd[2] * 100).toFixed(1) + ' %';

      ftw = Math.floor(0x100000000 * sf[2] / BITS_PER_SEC);
      duty = Math.floor(sd[2] * 0xFFFFFFFF);
      websocket.send('s,' + ftw + ',' + duty);
  }

  function rangeReset(disable=true) {
      for (const [k, v] of Object.entries(sliders)) {
        v[0].disabled = disable;
        if (k == "OFF")
          v[0].value = v[0].max;
        else
          v[0].value = v[0].min;
      }
  };

  function init() {
    websocket.onopen = function(evt) {
      connected_status.innerHTML = "‚úÖ";
      // setInterval(function() {
      //   websocket.send('p');
      // }, 250);
      processT();
    };

    websocket.onclose = function(evt) {
      connected_status.innerHTML = "‚ùå";
      rangeReset();
    };

    websocket.onmessage = function(evt) {
      console.log("dat: " + evt.data);
      if (evt.data.startsWith('{"hello": ')) {
        temp = JSON.parse(evt.data);
        MAX_DUTY_PERCENT = temp['MAX_DUTY_PERCENT'];
        sliders["DUTY"][0].max = MAX_DUTY_PERCENT / 100 * 10000;
        MAX_T_ON = temp['MAX_T_ON'];
        rangeReset(false);
        processT();
      }
    };

    websocket.onerror = function(evt) {
      connected_status.innerHTML = "üî• " + evt;
      rangeReset();
    };
  }

  window.addEventListener("load", init, false);

</script>
</body></html>
